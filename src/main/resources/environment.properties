csv.path=src/main/resources/data/csv/
csv.extension=.csv
xml.path=src/main/resources/data/xml/
xml.extension=.xml
exception.IOException.cannotCreateFile.message=unable to create file %s
test.user.incorrect.email=wrong
test.user.incorrect.password=wrong
array.delimiter=,
array.startSymbol=[
array.endSymbol=]
map.startSymbol={
map.endSymbol=}
map.delimiter=:
map.formatString=%d:%s
converter.regexp.list.withQuotes=^"\\[((([0-9]+,)*[0-9]+))?\\]"$
converter.regexp.map.withQuotes=^"\\{(([0-9]+:.+,)*([0-9]+:[^,]+]*))?\\}"$
converter.regexp.list.withoutQuotes=^\\[((([0-9]+,)*[0-9]+))?\\]$
converter.regexp.map.withoutQuotes=^\\{(([0-9]+:.+,)*([0-9]+:[^,]+]*))?\\}$
field.name.id=id
field.name.created=created
field.name.sign_up_type=signuptype
field.name.token=token
field.name.task=task
field.name.name=name
field.name.group_type.sql=group_type
field.name.task_type=task_type
field.name.status=status
field.name.description=description
field.name.importance=importance
field.name.remindType=remindType
field.name.remind_type.sql=remind_type
field.name.repetitionType=repetitionType
field.name.repetition_type.sql=repetition_type
field.name.time=time
field.name.surname=surname
field.name.email=email
field.name.password=password
field.name.member=member
field.name.groupType=groupType
format.user.toString=id: %d\nName: %s\nSurname: %s\nEmail: %s\nPassword: %s\nCreated: %s\nSign up type: %s\nToken: %s\n\n
new_line=\n
tab=\t
quotes="
single_quotes='
text.null=null
format.modificationRecord.toString=%sId: %d\n%sDate: %s\n%sType: %s\n%sValue name: %s\n%sValue: %s\n
format.extendedTask.toString=%sDescription: %s\n%sRemind type: %s\n%sImportance: %s\n%sRepetition type: %s\n%sTime: %s\n
format.basicTask.toString=%sId: %d\n%sType: %s\n%sCreated: %s\n%sName: %s\n%sStatus: %s\n%sHistory:\n%s\n
format.group.toString=%sId: %d\n%sType: %s\n%sCreated: %s\n%sName: %s\n%sTask list:\n%s%sHistory:\n%s
format.groupTask.toString=%s%s : \n%s\n
format.user=Information about user with id: %sUsers tasks: \n%sHistory list: \n%sGroups:\n%s
format.groupStatistic=Group statistics: \nNumber of groups in system: %d\nGroups divided by type: \n%sAverage group size: %.5f\n Average group size divided by type:\n%s
format.taskStatistic=Task static: \nNumber of tasks in system: %d\nTasks divided by type:\n%sTask count per owner:\n%sAverage task per owner:\n%s
message.userNotFounded=User not founded
jdbc.driver=org.h2.Driver
jdbc.url.mem=jdbc:h2:file:Z:\\projects\\StudyProject\\src\\main\\resources\\data\\db\\database
jdbc.url=jdbc:h2:mem:default
sql.create.table.user=create table if not exists user (id integer not null auto_increment, created timestamp not null default(systimestamp), email varchar(128) not null, password varchar(32) not null, name varchar(64) not null, surname varchar(64) not null, token varchar(128) not null, signUpType integer not null, primary key (id));
sql.create.table.group=create table if not exists "GROUP"( ID LONG auto_increment, NAME VARCHAR(128) not null, CREATED TIMESTAMP default CURRENT_TIMESTAMP not null, GROUP_TYPE INT not null, PASSWORD VARCHAR(64), constraint GROUP_PK primary key (ID));
sql.create.table.group_membership=create table if not exists GROUP_MEMBERSHIP( USER_ID LONG not null, GROUP_ID LONG not null, ROLE INT not null, constraint GROUP_MEMBERSHIP_PK primary key (USER_ID, GROUP_ID), constraint GROUP_MEMBERSHIP_GROUP_ID_FK foreign key (GROUP_ID) references "GROUP" (ID) on delete cascade, constraint GROUP_MEMBERSHIP_USER_ID_FK foreign key (USER_ID) references USER (ID) on delete cascade);
sql.create.table.task=create table if not exists TASK( ID LONG auto_increment, CREATED TIMESTAMP default CURRENT_TIMESTAMP not null, NAME VARCHAR(128) not null, STATUS INT not null, TASK_TYPE INT not null, REPETITION_TYPE INT, REMIND_TYPE INT, IMPORTANCE INT, DESCRIPTION VARCHAR(512), TIME TIMESTAMP, constraint TASK_PK primary key (ID));
sql.create.table.modification_record=create table if not exists MODIFICATION_RECORD( ID LONG auto_increment, CHANGED_VALUE_NAME VARCHAR(128) not null, CHANGED_DATE TIMESTAMP default CURRENT_TIMESTAMP not null, CHANGED_VALUE VARCHAR(128) not null, OPERATION_TYPE INT not null, constraint MODIFICATION_RECORD_PK primary key (ID));
sql.create.table.user_history=create table if not exists USER_HISTORY( USER_ID LONG not null, MODIFICATION_RECORD_ID LONG not null, constraint USER_HISTORY_PK primary key (USER_ID, MODIFICATION_RECORD_ID), constraint USER_HISTORY_MODIFICATION_RECORD_ID_FK foreign key (USER_ID) references MODIFICATION_RECORD (ID) on delete cascade, constraint USER_HISTORY_USER_ID_FK foreign key (USER_ID) references USER (ID) on delete cascade);
sql.create.table.group_history=create table if not exists GROUP_HISTORY( GROUP_ID LONG not null, MODIFICATION_RECORD_ID LONG not null, constraint GROUP_HISTORY_PK primary key (GROUP_ID, MODIFICATION_RECORD_ID), constraint GROUP_HISTORY_GROUP_ID_FK foreign key (GROUP_ID) references "GROUP" (ID) on delete cascade, constraint GROUP_HISTORY_MODIFICATION_RECORD_ID_FK foreign key (MODIFICATION_RECORD_ID) references MODIFICATION_RECORD (ID) on delete cascade);
sql.create.table.task_history=create table if not exists TASK_HISTORY( TASK_ID LONG not null, MODIFICATION_RECORD_ID LONG not null, constraint TASK_HISTORY_PK primary key (TASK_ID, MODIFICATION_RECORD_ID), constraint TASK_HISTORY_MODIFICATION_RECORD_ID_FK foreign key (MODIFICATION_RECORD_ID) references MODIFICATION_RECORD (ID) on delete cascade, constraint TASK_HISTORY_TASK_ID_FK foreign key (TASK_ID) references TASK (ID) on delete cascade);
sql.create.table.users_tasks=create table USER_TASKS\n(\n\tUSER_ID LONG not null,\n\tTASK_ID LONG not null,\n\tconstraint USER_TASKS_PK\n\t\tprimary key (USER_ID, TASK_ID),\n\tconstraint USER_TASKS_TASK_ID_FK\n\t\tforeign key (TASK_ID) references TASK (ID)\n\t\t\ton delete cascade,\n\tconstraint USER_TASKS_USER_ID_FK\n\t\tforeign key (USER_ID) references USER (ID)\n\t\t\ton delete cascade\n);\n\ncreate unique index USER_TASKS_TASK_ID_UINDEX\n\ton USER_TASKS (TASK_ID);
sql.create.table.group_tasks=create table if not exists GROUP_TASKS( GROUP_ID LONG not null, TASK_ID LONG not null, TASK_STATE INT not null, constraint GROUP_TASKS_PK primary key (GROUP_ID, TASK_ID), constraint GROUP_TASKS_GROUP_ID_FK foreign key (GROUP_ID) references \"GROUP\" (ID) on delete cascade, constraint GROUP_TASKS_TASK_ID_FK foreign key (TASK_ID) references TASK (ID) on delete cascade); create unique index GROUP_TASKS_TASK_ID_UINDEX on GROUP_TASKS (TASK_ID);
sql.select.by_id=select * from %s where id = %d;
sql.select=select * from %s;
sql.select.by_email_password=select * from user where email = '%s' and password = '%s';
sql.drop.table.group_membership=drop table if exists GROUP_MEMBERSHIP cascade;
sql.drop.table.user_history=drop table if exists USER_HISTORY cascade;
sql.drop.table.group_history=drop table if exists GROUP_HISTORY cascade;
sql.drop.table.task_history=drop table if exists TASK_HISTORY cascade;
sql.drop.table.modification_record=drop table if exists MODIFICATION_RECORD cascade;
sql.drop.table.users_tasks=drop table if exists USER_TASKS cascade;
sql.drop.table.user=drop table if exists USER cascade;
sql.drop.table.group_tasks=drop table if exists GROUP_TASKS cascade;
sql.drop.table.group=drop table if exists "GROUP" cascade;
sql.drop.table.task=drop table if exists TASK cascade;
sql.select.member_list=select A.*, B.ROLE from (select * from USER where ID in (select USER_ID from GROUP_MEMBERSHIP where GROUP_ID = %d)) as A inner join (select * from GROUP_MEMBERSHIP where GROUP_ID = %d) as B on A.ID = USER_ID;
sql.update.user=UPDATE USER set CREATED = parsedatetime ('%s', '%s'), EMAIL = '%s', PASSWORD = '%s', NAME = '%s', SURNAME = '%s',TOKEN = '%s', SIGNUPTYPE = '%d' where ID = '%d';
sql.insert.user=insert into USER values (default, default , '%s', '%s', '%s', '%s', '%s', %d);
sql.insert.user_tasks=insert into USER_TASKS values (%d, %d)
sql.insert.user_history=insert into USER_HISTORY values (%d, %d)
sql.select.group_by_user=select * from "GROUP" where ID in (select GROUP_ID from GROUP_MEMBERSHIP where USER_ID = %d);
sql.select.group_by_name=select * from "GROUP" where name like '%%%s%%';
sql.update.group=UPDATE "GROUP" set NAME = '%s', GROUP_TYPE = %d, PASSWORD = %s where ID = %d;
sql.update.task=UPDATE TASK set NAME = '%s', STATUS = %d, TASK_TYPE = %d, REPETITION_TYPE = %s, REMIND_TYPE = %s, IMPORTANCE = %s, DESCRIPTION = '%s', TIME = %s where ID = %d
sql.insert.group=INSERT INTO PUBLIC."GROUP" (ID ,NAME, CREATED, GROUP_TYPE, PASSWORD) VALUES (%d ,'%s', DEFAULT, %d, %s);
sql.insert.task=INSERT INTO PUBLIC.TASK (NAME, STATUS, TASK_TYPE, REPETITION_TYPE, REMIND_TYPE, IMPORTANCE, DESCRIPTION, TIME) VALUES ('%s', %d, %d, %s, %s, %s, %s, %s);
sql.insert.group_task=insert into GROUP_TASKS values (%d, %d, %d);
sql.insert.group_membership=insert into GROUP_MEMBERSHIP values (%d, %d, %d);
sql.insert.group_history=insert into GROUP_HISTORY values (%d, %d);
sql.insert.task_history=insert into TASK_HISTORY values (%d, %d);
sql.delete.group=DELETE FROM PUBLIC."GROUP" WHERE ID = %d
sql.select.users_task_list=select * from TASK where ID in (SELECT TASK_ID from USER_TASKS where USER_ID = %d);
sql.select.group_task_list=select TASK.*, GT.TASK_STATE from TASK inner join GROUP_TASKS GT on TASK.ID = GT.TASK_ID WHERE GROUP_ID = %d;
sql.parseDateTime=parsedatetime ('%s', '%s')
field.task_state=TASK_STATE
field.user_role=ROLE
field.changed_date=CHANGED_DATE
field.changed_value=CHANGED_VALUE
field.operation_type=OPERATION_TYPE
field.max_id=MAX_ID
sql.delete.task=DELETE FROM PUBLIC."TASK" WHERE ID = %d;
sql.select.modification_record.user=select * from MODIFICATION_RECORD where ID in (select MODIFICATION_RECORD_ID from USER_HISTORY where USER_ID = %d);
sql.select.modification_record.task=select * from MODIFICATION_RECORD where ID in (select MODIFICATION_RECORD_ID from TASK_HISTORY where TASK_ID = %d);
sql.select.modification_record.group=select * from MODIFICATION_RECORD where ID in (select MODIFICATION_RECORD_ID from GROUP_HISTORY where GROUP_ID = %d);
sql.insert.modification_record=INSERT INTO PUBLIC.MODIFICATION_RECORD (CHANGED_VALUE_NAME, CHANGED_VALUE, OPERATION_TYPE) VALUES ('%s', '%s', %d);
sql.select.max_id=select max(ID) as MAX_ID  from "%s";
sql.bean.name.modification_record=MODIFICATION_RECORD